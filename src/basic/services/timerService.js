import { uiEventBus } from "../core/eventBus.js";
import { discountService } from "./discountService.js";

export class TimerService {
  constructor(productService, discountService) {
    this.productService = productService;
    this.discountService = discountService;
    this.lightningSaleTimer = null;
    this.suggestSaleTimer = null;
  }

  // Î≤àÍ∞úÏÑ∏Ïùº ÌÉÄÏù¥Î®∏ ÏãúÏûë
  startLightningSaleTimer() {
    this.lightningSaleTimer = setInterval(() => {
      this.applyLightningSale();
    }, 3000); // 30Ï¥àÎßàÎã§ Ïã§Ìñâ
  }

  // Ï∂îÏ≤úÏÑ∏Ïùº ÌÉÄÏù¥Î®∏ ÏãúÏûë
  startSuggestSaleTimer() {
    this.suggestSaleTimer = setInterval(() => {
      this.applySuggestSale();
    }, 5000); // 45Ï¥àÎßàÎã§ Ïã§Ìñâ
  }

  // Î≤àÍ∞úÏÑ∏Ïùº Ï†ÅÏö© (ProductServiceÏùò ÎπÑÏ¶àÎãàÏä§ Î°úÏßÅ ÏÇ¨Ïö©)
  applyLightningSale() {
    const result = this.productService.applyLightningSale();
    if (result.success) {
      console.log("‚ö°Î≤àÍ∞úÏÑ∏Ïùº! " + result.product.name + "Ïù¥(Í∞Ä) 20% Ìï†Ïù∏ Ï§ëÏûÖÎãàÎã§!");
      this.updateUI();
      console.log(result.message);
    }
  }

  // Ï∂îÏ≤úÏÑ∏Ïùº Ï†ÅÏö© (ProductServiceÏùò ÎπÑÏ¶àÎãàÏä§ Î°úÏßÅ ÏÇ¨Ïö©)
  applySuggestSale() {
    const lastSelectedProduct = this.getLastSelectedProduct();
    const result = this.productService.applySuggestSale(lastSelectedProduct?.id);

    if (result.success) {
      console.log("üíù " + result.product.name + "ÏùÄ(Îäî) Ïñ¥Îñ†ÏÑ∏Ïöî? ÏßÄÍ∏à Íµ¨Îß§ÌïòÏãúÎ©¥ 5% Ï∂îÍ∞Ä Ìï†Ïù∏!");
      this.updateUI();
      console.log(result.message);
    }
  }

  // ÎßàÏßÄÎßâ ÏÑ†ÌÉùÎêú ÏÉÅÌíà Ï°∞Ìöå
  getLastSelectedProduct() {
    // Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî ÏÑ†ÌÉùÎêú ÏÉÅÌíàÏùÑ Ï∂îÏ†ÅÌïòÎäî Î°úÏßÅÏù¥ ÌïÑÏöî
    // ÌòÑÏû¨Îäî Í∞ÑÎã®Ìûà Ï≤´ Î≤àÏß∏ ÏÉÅÌíàÏùÑ Î∞òÌôò
    const products = this.productService.getProducts();
    return products.find(product => product.quantity > 0);
  }

  // UI ÏóÖÎç∞Ïù¥Ìä∏
  updateUI() {
    const originalProducts = this.productService.getProducts();
    const productsWithDiscounts = this.discountService.getProductsWithCurrentDiscounts(originalProducts);
    const discountInfos = this.calculateProductDiscountInfos(productsWithDiscounts);

    // ÏÉÅÌíà ÏòµÏÖò ÏóÖÎç∞Ïù¥Ìä∏ Ïù¥Î≤§Ìä∏ Î∞úÏÜ°
    uiEventBus.emit("product:options:updated", {
      products: productsWithDiscounts,
      discountInfos,
      success: true,
    });

    // Ïû•Î∞îÍµ¨Îãà Í∞ÄÍ≤© ÏóÖÎç∞Ïù¥Ìä∏
    this.updateCartPrices();
  }

  // Ïû•Î∞îÍµ¨Îãà Í∞ÄÍ≤© ÏóÖÎç∞Ïù¥Ìä∏
  updateCartPrices() {
    const cartItems = document.querySelectorAll(".cart-item");
    const itemsToUpdate = [];

    cartItems.forEach(cartItem => {
      const productId = cartItem.id; // cartItem.dataset.productId ÎåÄÏã† cartItem.id ÏÇ¨Ïö©
      const product = this.productService.getProductById(productId);

      if (product) {
        const discountInfo = {
          rate: this.discountService.calculateProductDiscountRate(product),
          status: this.discountService.getProductDiscountStatus(product),
        };

        itemsToUpdate.push({
          cartItem,
          product,
          discountInfo,
        });
      }
    });

    // Í∞ÄÍ≤© ÏóÖÎç∞Ïù¥Ìä∏ Ïù¥Î≤§Ìä∏ Î∞úÏÜ°
    uiEventBus.emit("product:prices:updated", {
      itemsToUpdate,
      success: true,
    });
  }

  // Ìï†Ïù∏ Ï†ïÎ≥¥ Í≥ÑÏÇ∞
  calculateProductDiscountInfos(products) {
    return products.map(product => ({
      productId: product.id,
      rate: product.discountRate || this.discountService.calculateProductDiscountRate(product),
      status: product.discountStatus || this.discountService.getProductDiscountStatus(product),
    }));
  }

  // ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
  cleanup() {
    if (this.lightningSaleTimer) {
      clearInterval(this.lightningSaleTimer);
    }
    if (this.suggestSaleTimer) {
      clearInterval(this.suggestSaleTimer);
    }
  }
}
